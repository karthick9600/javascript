//map -execute callback for each array
//     element and returns  new array

let priceUSD=[20,35,13]
let priceINR=priceUSD.map(x=>x*83)
console.log(priceINR)

priceINR=priceUSD.map(convert)
function convert(val){
  return val*83
}
console.log(priceINR)

const input=[
  {name:'john',age:15},
  {name:'Radha',age:45},
  {name:'kaushik',age:12},
  {name:'Anu',age:21},
  {name:'Divya',age:26}
]
const ages=input.map(x=>x.age)
console.log(ages)
const names=input.map(x=>x.name)
console.log(names)

//Filter -returns new array by checking
//         each value of original arr using
//        call back  fn

let cost=[35,234,12,34,54,123]

let lessThan100=cost.filter(x=>x<100)
console.log(lessThan100)

//reduce -  execute reducer callback
//          returns accumulated result

cost =[35,234,12,34,54,123]
let cartTotal =cost.reduce((total,el)=>total+el)
console.log(cartTotal)



let arr2d = [
  ['a', 'b'],
  ['c', 'd'],
  ['c', 'd']
];

let result = { 'a': 1, 'b': 2 };
result['c'] = 1;
console.log(result['b']); // Output: 2

console.log(arr2d.flat()); // Flattens 2D array to 1D

let count = arr2d.flat().reduce(
  (accumulator, currVal) => {
  if (accumulator[currVal]) 
    accumulator[currVal]++;
  else 
    accumulator[currVal] = 1;
  return accumulator;
}, {});

console.log(count); // Output: { a: 1, b: 1, c: 2, d: 2 }


//Exercise
//1.remove the duplicate value
let arr=[4,6,2,3,1,1,3,5,7,8,4,3]
let uniqueArr=[...new Set(arr)]
console.log(uniqueArr)
//2.Name
let name = "Robert Andrew George";

let res = name
  .split(" ")           // Split by space -> ['Robert', 'Andrew', 'George']
  .map(word => word[0]) // Take first letter of each word
  .join("");            // Join them to form 'RAG'

console.log(res); // Output: RAG
//3.Numbers
let inputs = [6, -5, 7, -2, 4, 6, -1];

let sum = inputs.reduce((acc, val, index) => {
  if (index % 2 === 0) {
    // check for even index
    acc += val;
  }
  return acc;
}, 0);

console.log(sum);


